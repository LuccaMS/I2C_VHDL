library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity master is 
PORT(
	i_CLK : in std_logic;
	i_RST : in std_logic;
	en_SCL : out std_logic := '0'; --padrão para alta impedancia
	en_SDA : out std_logic := '0'; --padrão para alta impedancia
	i_IsEdgeUp : in std_logic; --borda detectada do SCL, quando detectarmos precisa-se mandar dados do SDA
	o_LOAD : out std_logic;
	i_STARTBUTTON : in std_logic; -- botao de inicio de tudo
	i_RESULT : in std_logic --teremos o "counter" conectado no SCL para verificar se já enviamos 8 bordas 
	--de clock
);	
end master;

--o P2S irá obter o dado diretamente, não precisamos receber os dados do slave
--como o professor simplificou para a gente.

architecture behavioral of master is 
	
	type Estado is (idle,enviando);
		attribute syn_encoding : string;
		attribute syn_encoding of Estado : type is "safe";
	
	signal w_state : Estado := idle;
	
	--vamos criar os sinais de condições de inicio;
	--sabemos que o SDA sempe será 1 no inicio e fim de conexão
	
	begin

PROCESS (i_CLK,i_RST) --nosso processo central do master
	begin
	if(i_RST = '1') then
		w_state <= idle;
	elsif rising_edge(i_CLK) then
		case w_state is
			when idle =>
				if(i_STARTBUTTON = '1') then
					o_LOAD <= '1';
--					wait for rising_edge(i_CLK); --reproduzindo o padrão de inicio de conexão do I2C
--					en_SDA <= '0';
--					wait for rising_edge(i_CLK); 
--					en_SCL <= '0';
					w_state <= enviando;
				else
					w_state <= idle;
				end if;
			when enviando =>
				o_LOAD <= '0'; --zerando o load já que ele estava 1 no idle
				if(i_RESULT = '1') then --isso nos indica que já enviamos 8 bordas de clock no SCL
					en_SCL <= '0';
					en_SDA <= '0';
					w_state <= idle; 
				else
				--caso ainda não tenhamos enviado as 8 bordas, iremos manter o en_SCL ativo
					en_SCL <= '1'; --ativamos o SCL, contudo, aida precisamos verificar se temos de fato a borda
					--de subida, uma vez que usamos um NAND
					if(i_IsEdgeUp = '1') then --talvez precise inverter e usar edge down
						en_SDA <= '1';
					w_state <= enviando;
					end if;
				end if;
			when others =>
				null;
			end case;
	end if;
			
	end PROCESS;
end behavioral;